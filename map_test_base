import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd
import json
import geojson

# Load the Excel file
file_path = "C:\\Users\\AEnnis\\OneDrive - Analog Devices, Inc\\Documents\\Wafer Capacity Map Project\\locations.xlsx"
sheet_name = 'locations'
df = pd.read_excel(file_path, sheet_name=sheet_name)

# Initialize the Dash app
app = dash.Dash(__name__)

# Convert DataFrame to GeoJSON format

def df_to_geojson(df, properties, lat='latitude', lon='longitude'):
    geojson_features = []
    for _, row in df.iterrows():
        feature = {
            'type': 'Feature',
            'geometry': {
                'type': 'Star',
                'coordinates': [row[lon], row[lat]],
            },
            'properties': {}
        }
        for prop in properties:
            feature['properties'][prop] = row[prop]
        geojson_features.append(feature)
    return geojson.FeatureCollection(geojson_features)

# Define properties you want to include in GeoJSON properties
geojson_properties = ['name', 'No. Fabs', 'Wafer Size (mm)', 'Process(es)', 'Min. Geom. (nm)', 'Product(s)', 'Installed Capacity']

# Convert DataFrame to GeoJSON
geojson_data = df_to_geojson(df, properties=geojson_properties)

# Layout of the Dash app
app.layout = html.Div([
    html.H1("Global Wafer Capacity Interactive Map"),
    dcc.Graph(
        id='map',
        figure={},
        style={'width': '100%', 'height': '90vh'} 
    )
])

# Callback to update map based on click
@app.callback(
    Output('map', 'figure'),
    [Input('map', 'clickData')]
)
def update_map(clickData):
    # Initial map layout using Plotly Express
    fig = px.scatter_mapbox(df, lat='latitude', lon='longitude', hover_name='name',
                            hover_data={'name': False, 'latitude': False, 'longitude': False, 'No. Fabs': True, 'Wafer Size (mm)': True, 'Process(es)': True, 'Min. Geom. (nm)': True, 'Product(s)': True, 'Installed Capacity': True},
                            zoom=3)

    fig.update_layout(mapbox_style="open-street-map", mapbox_zoom=2, mapbox_center={"lat": 38, "lon": -95})
    fig.update_traces(marker=dict(color='navy'), selector=dict(type='scattermapbox'))

    # Update the map based on click data
    if clickData:
        name = clickData['points'][0]['hovertext']
        selected_location = df[df['name'] == name]
        fig.add_trace(px.scatter_mapbox(selected_location, lat='latitude', lon='longitude').data[0])

    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
